@page "/browser/{endpointId}"
@page "/browser/{supervisorId}/{endpointId}"
@page "/browser/{supervisorId}/{endpointId}/{page}"


@using Microsoft.Azure.IIoT.App.Services
@using Microsoft.Azure.IIoT.App.Components.Pager
@using Microsoft.Azure.IIoT.App.Components.Drawer
@using Microsoft.Azure.IIoT.App.Data
@using Microsoft.AspNetCore.Components;
@using Microsoft.Azure.IIoT.OpcUa.Api.Twin.Models;
@using System.Collections.Generic;


@inject NavigationManager NavigationManager
@inject Services.Browser BrowseManager

<h1>Browser</h1>

<div>@supervisorId/@endpointId/@BrowseManager.Path</div>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>NodeId</th>
            <th>NodeType</th>
            @foreach (var node in PagedNodeList.Results)
            {
                if (node.Value != string.Empty)
                {
                    <th>
                        Value
                    </th>
                    break;
                }
            }
            <th>
                @if (PagedNodeList.Results.Count > 0)
                {
                    if (PagedNodeList.Results[0].ParentName != "Root")
                    {
                        <a href="javascript: void(0)" @onclick="@(() => GetTreeBackAsync(PagedNodeList.Results[0].NextParentId, pagedNodeList.Results[0].ParentIdList))">
                            <span class="oi oi-arrow-left"></span>
                        </a>
                    }
                    else
                    {
                        if (PagedNodeList.Results[0].SupervisorId != null)
                        {
                            <a href='endpoints/@PagedNodeList.Results[0].SupervisorId'>
                                <span class="oi oi-arrow-left"></span>
                            </a>
                        }
                    }
                }
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var node in PagedNodeList.Results)
        {
            <tr>
                <td>@node.NodeName</td>
                <td>@node.Id</td>
                @if ((node.Children == true) && (node.NodeClass != NodeClass.Method))
                {
                    <td>
                        <a href="javascript: void(0)" @onclick="@(() => GetTreeAsync(node.Id, node.ParentIdList))">
                            @node.NodeClass
                        </a>
                    </td>
                }
                else if (node.NodeClass == NodeClass.Method)
                {
                    <td>
                        <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(node))">
                            @node.NodeClass
                        </a>
                    </td>
                }
                else
                {
                    <td>@node.NodeClass</td>
                    @if (node.NodeClass == NodeClass.Variable && (node.AccessLevel == NodeAccessLevel.CurrentRead || node.AccessLevel == NodeAccessLevel.CurrentWrite ||
                        node.AccessLevel == (NodeAccessLevel.CurrentRead | NodeAccessLevel.CurrentWrite)))
                    {
                        <td>
                            <a href="javascript: void(0)" @onclick="@(() => OpenDrawer(node))">
                                @node.Value
                            </a>
                        </td>
                    }
                }
            </tr>
        }
    </tbody>
</table>

<Drawer HeaderText="Select Action" ObjectData="@NodeData" IsOpened="@IsOpened" CloseDrawer="@(() => CloseDrawer())">
    <_DrawerActionContent nodeData="@NodeData" endpointId="@endpointId" pagedNodeList="@PagedNodeList"></_DrawerActionContent>
</Drawer>

<Pager Result=@NodeList PageChanged=@((Page) => PagerPageChanged(Page)) />

@code {

    [Parameter]
    public string supervisorId { get; set; } = string.Empty;

    [Parameter]
    public string endpointId { get; set; } = "uat2a0ca049f2a8cfd99f2b0b972281b40baf6bb378";

    [Parameter]
    public string Page { get; set; } = "1";

    public PagedResult<ListNode> NodeList = new PagedResult<ListNode>();
    public PagedResult<ListNode> PagedNodeList = new PagedResult<ListNode>();
    public bool IsOpened { get; set; } = false;
    public ListNode NodeData { get; set; }
    

    public void PagerPageChanged(int page)
    {
        PagedNodeList = NodeList.GetPaged(page, 10);
        NavigationManager.NavigateTo("/browser/" + supervisorId + "/" + endpointId + "/" + page);
    }

    protected override async Task OnInitializedAsync()
    {
        await BrowseTreeAsync(string.Empty, new List<string>(), BrowseDirection.Forward);
    }

    private async Task GetTreeAsync(string id, List<string> parentId)
    {
        await BrowseTreeAsync(id, parentId, BrowseDirection.Forward);
    }

    private async Task GetTreeBackAsync(string id, List<string> parentId)
    {
        await BrowseTreeAsync(id, parentId, BrowseDirection.Backward);
        NavigationManager.NavigateTo("/browser/" + supervisorId + "/" + endpointId);
    }

    private async Task BrowseTreeAsync(String id, List<string> parentId, BrowseDirection direction)
    {
        NodeList = await BrowseManager.GetTreeAsync(endpointId, id, parentId, supervisorId, direction);
        Page = "1";
        PagedNodeList = NodeList.GetPaged(Int32.Parse(Page), 10);
    }

    private void OpenDrawer(ListNode node)
    {
        IsOpened = true;
        NodeData = node;
    }

    private void CloseDrawer()
    {
        IsOpened = false;
        BrowseManager.MethodCallResponse = null;
        this.StateHasChanged();
    }
}